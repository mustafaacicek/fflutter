workflows:
  ios-workflow:
    name: iOS Build
    instance_type: mac_mini_m1
    environment:
      xcode: latest
      cocoapods: default
      vars:
        XCODE_WORKSPACE: "ios/Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
    scripts:
      - name: Install Flutter dependencies
        script: |
          flutter pub get
      - name: Update CocoaPods repo
        script: |
          pod repo update --verbose
      - name: Create Firebase modulemap
        script: |
          mkdir -p ios/Runner
          cat > ios/Runner/Firebase.modulemap << EOF
          framework module Firebase {
            umbrella header "Firebase.h"
            export *
            module * { export * }
            requires objc
          }
          EOF
      - name: Pod install with forced repo update
        script: |
          cd ios
          # Podfile.lock dosyasını silme
          rm -f Podfile.lock
          # Pods klasörünü temizleme
          rm -rf Pods
          # Pod repo update ve install
          pod repo update --verbose
          pod install --repo-update --verbose
      - name: Fix Firebase modularity issue
        script: |
          cd ios
          # Düzenleme komutları
          find Pods -name "*.xcconfig" -type f -exec sed -i '' 's/CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES/CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = NO/g' {} \;
          
          # Firebase için özel ayarlar
          find Pods -path "*/firebase_messaging/*" -name "*.xcconfig" -type f -exec sed -i '' 's/CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES = NO/CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES = YES/g' {} \;
          
          # Tüm Firebase modülleri için ayarlar
          find Pods -path "*/Firebase*" -name "*.xcconfig" -type f -exec sed -i '' 's/CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES = NO/CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES = YES/g' {} \;
          
          # FLTFirebaseMessagingPlugin.h dosyasını düzenleme
          find Pods -path "*/firebase_messaging/*" -name "FLTFirebaseMessagingPlugin.h" -type f -exec sed -i '' 's/#import <Firebase\/Firebase.h>/#import "Firebase.h"/g' {} \;
          
          # Firebase.h dosyasını kopyalama
          mkdir -p Pods/Headers/Public/firebase_messaging
          if [ -f "Pods/Firebase/CoreOnly/Sources/Firebase.h" ]; then
            cp Pods/Firebase/CoreOnly/Sources/Firebase.h Pods/Headers/Public/firebase_messaging/
          fi
          
          # Modulemap dosyalarını oluşturma
          mkdir -p Pods/Firebase/CoreOnly/Sources
          cat > Pods/Firebase/CoreOnly/Sources/module.modulemap << EOF
          framework module Firebase {
            umbrella header "Firebase.h"
            export *
            module * { export * }
            requires objc
          }
          EOF
          
          mkdir -p Pods/Headers/Public/Firebase
          cat > Pods/Headers/Public/Firebase/module.modulemap << EOF
          framework module Firebase {
            umbrella header "Firebase.h"
            export *
            module * { export * }
            requires objc
          }
          EOF
      - name: Flutter build iOS
        script: |
          flutter build ios --debug --no-codesign
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
  
  android-workflow:
    name: Android Build
    instance_type: mac_mini_m1
    environment:
      java: 11
      vars:
        GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx8g -XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:+UseParallelGC"
    scripts:
      - name: Configure Gradle memory settings
        script: |
          # Gradle bellek ayarlarını artır
          echo "org.gradle.jvmargs=-Xmx8g -XX:MaxPermSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:+UseParallelGC" >> android/gradle.properties
          echo "org.gradle.daemon=true" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          echo "org.gradle.configureondemand=true" >> android/gradle.properties
          
          # Jetifier'ı devre dışı bırak (sorun çıkarıyor)
          echo "android.enableJetifier=false" >> android/gradle.properties
          echo "android.enableR8=true" >> android/gradle.properties
          echo "android.useAndroidX=true" >> android/gradle.properties
          
          # Gradle derleme performansını artır
          echo "org.gradle.caching=true" >> android/gradle.properties
          echo "android.enableBuildCache=true" >> android/gradle.properties
          
          # Dex ayarları
          echo "android.enableDexingArtifactTransform.desugaring=false" >> android/gradle.properties
          echo "android.dexOptions.preDexLibraries=false" >> android/gradle.properties
      - name: Install Flutter dependencies
        script: |
          flutter pub get
      - name: Clean Android build
        script: |
          cd android
          ./gradlew clean
      - name: Build Android APK (Jetifier olmadan)
        script: |
          # Debug APK oluştur (daha az bellek kullanır)
          flutter build apk --debug --split-per-abi
    artifacts:
      - build/app/outputs/flutter-apk/*.apk
      - build/app/outputs/logs/*.log
