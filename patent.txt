TARİFNAME
Başlık:
Toplu Etkinliklerde Mobil Cihazlarla Eşzamanlı Ses ve Işık Gösterisi Sağlayan Sistem
Teknik Alan:
Bu buluş, konser, spor karşılaşması, miting, festival ve benzeri toplu etkinliklerde
katılımcıların mobil cihazları aracılığıyla eşzamanlı ses yayını ve ışık gösterisi
gerçekleştirmelerine imkân tanıyan, merkezi yönetim paneli ve mobil istemcilerden
oluşan bir senkronizasyon sistemine ilişkindir.
Tekniğin Bilinen Durumu (Arka Plan):
Günümüzde toplu etkinliklerde binlerce kişinin katılımıyla gerçekleştirilen sesli veya
görsel gösterilerin senkronizasyonu genellikle zorluk arz etmektedir. Katılımcıların
birlikte hareket edebilmesi, etkinlik atmosferini güçlendirmekte ve ortak deneyimi
artırmaktadır. Ancak mevcut sistemler genellikle manuel kontrole dayalı veya bireysel
katılıma açık olduğundan, tüm katılımcılar arasında tam senkronizasyon
sağlanamamaktadır.
Buluşun Amacı:
Bu buluşun amacı, merkezi bir kontrol paneli kullanarak seçilen ses, şarkı sözleri ve ışık
efektlerinin mobil cihazlara gerçek zamanlı, eşzamanlı ve senkronize biçimde
iletilmesini sağlayarak toplu etkinliklerde görsel-işitsel deneyimin kalitesini artırmaktır.
Böylece katılımcılar, senkronize bir şekilde ses dinleyip ışık gösterilerine katılabilir.
Buluşun Özeti:
Buluş konusu sistem üç ana modülden oluşur:
1. Süperadmin Modülü: Ülke, takım ve yönetici kullanıcı tanımlamalarının yapıldığı;
sistem genel yapılandırmasının sağlandığı üst seviye yönetim arayüzüdür.
2. Admin Modülü: Her bir etkinlik (örneğin maç) için ses dosyalarının, görsellerin, şarkı
sözlerinin ve ışık efektlerinin tanımlandığı ve canlı yayının yönetildiği yönetici kontrol
panelidir.
3. Katılımcı (Mobil) Modülü: Katılımcıların mobil uygulama aracılığıyla ülke ve takım
seçimi yapabildiği, aktif etkinliklere dahil olarak yönetici tarafından başlatılan içerikleri
eş zamanlı takip edebildiği mobil istemci uygulamasıdır.
Detaylı Açıklama ve Teknik Çözüm:
Sistem mimarisi aşağıdaki teknolojilerle inşa edilmiştir:
- Backend: Java Spring Boot
- Gerçek zamanlı veri aktarımı: WebSocket protokolü
- Web arayüzü: Angular
- Mobil istemciler: Flutter/Dart

Yöneticiler, admin paneli üzerinden ses dosyası, şarkı sözleri ve ışık efektleri içeren bir
maç senaryosu oluşturur. Bu senaryo, istemcilere bir veri yapısı olarak iletilir. Bu yapıda
aşağıdaki alanlar yer alır:
- Etkinlik kimliği
- Ses içeriğine ait kimlik ve URL
- Görsel URL
- İçerik başlığı
- Durum bilgisi (örneğin başlatıldı, duraklatıldı)
- Senaryonun güncellendiği zaman damgası
- Senkronizasyonun başladığı epoch zaman bilgisi
- Eşzamanlı şarkı sözleri listesi
- Fener (flashlight) kullanım durumu

Mobil cihazlar, yöneticinin belirlediği zaman bilgisi doğrultusunda gecikmesiz biçimde:
- Ses dosyasını başlatabilir,
- Belirli bir zaman noktasına senkronize olabilir,
- Cihaz fenerini veya ekran ışığını belirlenen ritimde yanıp sönecek şekilde kullanabilir,
- Eşzamanlı şarkı sözlerini ekranda görüntüleyerek toplu katılım sağlayabilir.

Sistem, özellikle tribünlerde veya sahalarda binlerce kişinin katılım sağladığı
durumlarda kullanıcıların kendi cihazlarını merkezi olarak yönetilen senkronize bir
gösteri platformuna dönüştürmesini sağlar.

### Ses Senkronizasyon Algoritması ve Teknik Detaylar

#### 1. Hibrit Önbellek ve Dinamik İndirme Sistemi

Sistem, stadyumdaki canlı deneyimi simüle etmek için özel bir hibrit önbellek ve dinamik indirme sistemi kullanır:

SoundManager → ApiProvider → Yerel Depolama → Gerçek Zamanlı Oynatma

Bu mimaride:
- **Birincil Önbellek Katmanı**: Tüm ses dosyaları, kullanıcının cihazına önceden indirilir ve yerel depolamada saklanır.
- **İkincil Önbellek Katmanı**: Ses dosyaları, oynatılmadan önce belleğe yüklenir ve hazır tutulur.
- **Akıllı Yükleme Algoritması**: Sistem, kullanıcının maç izleme davranışlarını analiz ederek, hangi seslerin daha yüksek öncelikle yükleneceğini belirler.

#### 2. Ön-İndirme ve Senkronize Oynatma Algoritması

Sistem, aşağıdaki adımlarla çalışan patentlenebilir bir senkronize ses oynatma algoritması kullanır:

1. Kullanıcı bir takım seçtiğinde, tüm ses dosyaları önceden indirilir ve yerel depolamada saklanır
2. Ses dosyaları indirildikten sonra, daha hızlı oynatma için ön-kod çözüme (pre-decode) tabi tutulur
3. Yönetici tarafından gönderilen komutlar WebSocket üzerinden mobil cihazlara iletilir
4. Ses çalma işlemi, sunucudan gelen startAtEpochMillis ve currentMillisecond parametreleriyle senkronize edilir
5. Senkronizasyon için epoch zaman damgaları kullanılır

Bu algoritma, gerçek kodda şu şekilde uygulanır:

```
Future<void> playSynchronizedSound(int soundId, int startAtEpochMillis) async {
  // Ses dosyasının yolunu al
  final soundPath = await getSoundFilePath(teamId, soundId);
  if (soundPath == null) {
    print('Ses dosyası bulunamadı');
    return;
  }
  
  // Mevcut zamanı al
  final currentTime = DateTime.now().millisecondsSinceEpoch;
  
  // Başlangıç zamanı ile mevcut zaman arasındaki farkı hesapla
  final delta = startAtEpochMillis - currentTime;
  
  if (delta > 0) {
    // Belirtilen zamandan önce: Bekle ve sonra çal
    await Future.delayed(Duration(milliseconds: delta));
    await audioPlayer.setFilePath(soundPath);
    await audioPlayer.play();
  } else {
    // Belirtilen zamandan sonra: Hemen çal
    await audioPlayer.setFilePath(soundPath);
    await audioPlayer.play();
  }
}
```

#### 3. Ön-Kod Çözüme ve Hızlı Başlatma Sistemi

Sistem, ses dosyalarının hızlı başlatılması için özel bir ön-kod çözüme mekanizması kullanır:

1. Ses dosyaları indirildikten sonra, _decodeAudioFile metodu ile ön-kod çözüme işlemine tabi tutulur
2. Çözülen ses dosyaları _decodedSounds map'inde izlenir
3. Ses çalma komutu geldiğinde, önceden çözülmüş ses dosyaları anında oynatılabilir
4. Çözülmemiş ses dosyaları için önce çözümleme yapılır, sonra oynatılır
5. Çözümleme durumu cihazın yerel depolama alanında saklanır ve uygulama yeniden başlatıldığında kontrol edilir:

```
function calculateBufferTolerance(networkLatency, devicePerformance) {
  baseTolerance = 100; // ms
  networkFactor = networkLatency * 0.5;
  performanceFactor = devicePerformance < THRESHOLD ? 50 : 0;
  return min(baseTolerance + networkFactor + performanceFactor, MAX_TOLERANCE);
}
```

#### 4. Backend Senkronizasyon Yönetim Sistemi

Spring Boot backend tarafında, ses senkronizasyonu için özel bir durum yönetim sistemi geliştirilmiştir:

1. **MatchSoundStateManager**: Her maç için ses durumunu hafızada tutan ve veritabanı operasyonlarını minimize eden durum yöneticisi
   - Maç ID'sine göre ses durumunu ConcurrentHashMap veri yapısında saklar
   - Her ses durumu için aktiveSoundId, soundStatus, currentMillisecond ve flashlightEnabled bilgilerini tutar
   - Durum değişiklikleri (başlatma, durdurma, duraklatma, devam ettirme) için atomik operasyonlar sağlar

2. **WebSocket Mesaj Optimizasyonu**: Bant genişliği kullanımını azaltmak için optimize edilmiş mesaj yapısı
   - İlk bağlantıda tam veri (ses URL'si, başlık, görsel URL'si, şarkı sözleri) gönderilir
   - Sonraki güncellemelerde sadece kritik veriler (soundId, status, currentMillisecond, startAtEpochMillis) gönderilir
   - Pseudo-kod:

```
function createOptimizedWebSocketMessage(matchId, state) {
  return {
    matchId: matchId,
    soundId: state.activeSoundId,
    status: state.soundStatus,
    currentMillisecond: state.currentMillisecond,
    startAtEpochMillis: System.currentTimeMillis(),
    flashlightEnabled: state.flashlightEnabled
  };
}
```

3. **Oturum Yönetimi ve Yayın Mekanizması**: WebSocket bağlantılarının etkin yönetimi
   - Her maç için ayrı bir oturum haritası (sessionMap) tutulur
   - Yeni bağlantılar geldiğinde mevcut ses durumu anında gönderilir
   - Durum değişiklikleri tüm bağlı istemcilere eşzamanlı olarak yayınlanır
   - Pseudo-kod:

```
function broadcastSoundUpdate(matchId) {
  sessions = matchSessions.get(matchId);
  if (sessions != null && !sessions.isEmpty()) {
    state = matchSoundStateManager.getState(matchId);
    if (state != null) {
      message = createSoundWebSocketMessage(matchId, state);
      jsonMessage = objectMapper.writeValueAsString(message);
      textMessage = new TextMessage(jsonMessage);
      
      for (session : sessions.values()) {
        if (session.isOpen()) {
          session.sendMessage(textMessage);
        }
      }
    }
  }
}
```

#### 5. Çoklu Cihaz Senkronizasyon Protokolü

Aynı mekândaki birden fazla cihazın senkronize çalışması için özel bir protokol geliştirilmiştir:

1. Yakındaki cihazlar Bluetooth Low Energy (BLE) ile tespit edilir
2. Bir "master" cihaz seçilir ve diğer cihazlar buna senkronize olur
3. Ses çalma komutları, master cihazdan diğerlerine iletilir
4. Cihazlar arası zaman farkı hesaplanır ve telafi edilir

Çoklu cihaz zaman senkronizasyon protokolü:

```
protocol MultiDeviceTimeSync {
  1. Master broadcasts timestamp T_m
  2. Slave receives at T_s and calculates offset = T_s - T_m
  3. Slave sends acknowledgment at T_s'
  4. Master receives at T_m' and calculates RTT = T_m' - T_m
  5. True offset = offset - (RTT/2)
  6. Apply compensation factor based on device processing capability
}
```

#### 5. Ses Kalitesi Optimizasyonu

Sistem, bant genişliği ve ses kalitesi arasında dinamik bir denge sağlar:

- Ses dosyaları farklı kalite seviyelerinde (48kHz/320kbps, 44.1kHz/192kbps, 32kHz/128kbps) saklanır
- Ağ koşullarına göre uygun kalite seviyesi seçilir
- Kritik sesler (gol sesleri, önemli tezahüratlar) her zaman en yüksek kalitede indirilir
- Arka plan sesleri daha düşük kalitede indirilebilir
### Rakip Sistemlerden Teknik Farklılıklar ve Üstünlükler

#### TikTok Live ve Twitch Live'dan Farkları

1. **Gecikme Yönetimi**:
   - TikTok/Twitch: 3-10 saniye arasında gecikme ile çalışır, gerçek zamanlı etkileşim sınırlıdır
   - Fanla: Önceden indirilmiş ses dosyaları ile anında tepki verir, internet bağlantısı olmadan bile çalışabilir

2. **Senkronizasyon Mekanizması**:
   - TikTok/Twitch: Merkezi sunucu üzerinden tek yönlü yayın yapar
   - Fanla: WebSocket üzerinden komut gönderimi ve önceden indirilmiş ses dosyaları ile senkronize oynatma sağlar

3. **Ağ Optimizasyonu**:
   - TikTok/Twitch: Sürekli streaming gerektirdiğinden yüksek bant genişliği kullanır
   - Fanla: Önbellek sistemi ile minimum bant genişliği kullanır, sadece komut sinyalleri için internet bağlantısı gerektirir

#### Stadyum Kontrol Sistemlerinden Farkları

1. **Ölçeklenebilirlik**:
   - Stadyum Sistemleri: Merkezi kontrol ünitesi gerektirir, fiziksel altyapıya bağımlıdır
   - Fanla: Herhangi bir ek donanım gerektirmez, kullanıcıların kendi mobil cihazları üzerinden çalışır

2. **Kurulum ve Maliyet**:
   - Stadyum Sistemleri: Yüksek kurulum maliyeti ve bakım gerektirir
   - Fanla: Sıfır donanım maliyeti, kolay kurulum ve güncelleme imkanı sunar

3. **Kullanıcı Katılımı**:
   - Stadyum Sistemleri: Pasif deneyim sunar
   - Fanla: Kullanıcı etkileşimli, katılımcı deneyim sağlar

### Sanayiye Uygulanabilirlik

Bu sistem, stadyumlarda, konser alanlarında, açık hava mitinglerinde, festivallerde ve
diğer büyük organizasyonlarda uygulanabilir. Kullanıcıların herhangi bir ek donanıma
ihtiyaç duymadan sadece mobil cihazları üzerinden etkinliğe dahil olmalarını sağlayarak
organizasyonların teknik yükünü azaltır ve deneyimi zenginleştirir.
Güvenlik ve Gizlilik:
Sistem tasarımında, mobil istemcilerden (katılımcı kullanıcılar) hiçbir kişisel veri
toplanmamaktadır. Kullanıcıların kimlik bilgileri veya özel verileri sisteme iletilmez ve
depolanmaz, böylece kullanıcı gizliliği en üst düzeyde korunur. Yönetici (admin)
kullanıcılar ise kendi sunucularında, JWT (JSON Web Token) tabanlı kimlik doğrulama ve
yetkilendirme mekanizması ile güvenli bir şekilde sisteme erişirler. Bu yöntem, sadece
yetkili kişilerin yönetim paneline erişimini sağlar ve yetkisiz erişimleri engeller. Ayrıca,
tüm veri iletişimi HTTPS ve WebSocket Secure (WSS) protokolleri üzerinden şifreli olarak
gerçekleştirilir, böylece sistemin güvenliği ve veri bütünlüğü sağlanır.


İstemler
1.
Ağırlıklı olarak futbol, basketbol ve benzeri spor müsabakalarında, tribündeki taraftarları
ortak bir görsel ve işitsel deneyim etrafında birleştirmek amacıyla kullanılan, merkezi bir
yönetim paneli (süperadmin ve admin modülleri) ile bu panele bağlı mobil istemcilerden
oluşan, eşzamanlı ses ve ışık gösterisi gerçekleştirmeye yönelik bir sistem olup;
– Süperadmin modülü aracılığıyla ülke, takım, etkinlik ve yönetici kullanıcılarının
tanımlandığı;
– Yönetici (admin) paneli üzerinden maç sırasında kullanılacak ses dosyalarının, şarkı
sözlerinin ve ışık komutlarının yüklendiği ve senkronize şekilde yayınlandığı;
– Katılımcıların mobil cihazlarındaki uygulama üzerinden ülke ve takım seçerek aktif
maçlara katılım sağladığı;
– Yönetici tarafından başlatılan senkronize ses ve ışık verilerini mobil cihazlarında aynı
anda alıp yansıttığı,
bir toplu etkileşim sistemidir.
2.
İstem 1’de belirtilen sistemde; mobil istemcilerin ses içeriklerini eşzamanlı olarak
başlatabilmesi için, startAtEpochMillis ve currentMillisecond gibi zaman verileriyle
çalışan bir senkronizasyon modülü mevcuttur.
3.
İstem 1’de belirtilen sistemde; yönetici tarafından gönderilen anlık komutların (başlat,
duraklat, durdur, ışık aç/kapat gibi) WebSocket teknolojisi ile gecikmesiz olarak mobil
cihazlara iletildiği bir haberleşme altyapısı bulunmaktadır.
4.
İstem 1’de belirtilen sistemde; yöneticinin gönderdiği şarkı sözlerinin, mobil uygulama
ekranlarında eşzamanlı şekilde gösterilmesini sağlayan bir kullanıcı arayüzü yer
almaktadır.
5.
İstem 1’de belirtilen sistemde; yönetici tarafından gönderilen ışık komutlarının, mobil
cihazlardaki fener (flashlight) donanımı aracılığıyla ritmik biçimde yanıp sönmesini
sağlayan bir kontrol altyapısı bulunmaktadır.
6.
İstem 1’de belirtilen sistemde; yöneticinin yüklediği ses içeriklerinin (soundUrl) mobil
istemcilerde gecikmesiz ve aynı anda çalınmasını sağlayan bir medya oynatma modülü
yer almaktadır.
7.
İstem 1’de belirtilen sistemde; mobil uygulama arayüzü üzerinden kullanıcıların sırasıyla
ülke → takım → etkinlik seçimi yaparak katılım sağlayabildiği bir kullanıcı yönlendirme
altyapısı bulunmaktadır.
8.
İstem 1’de belirtilen sistem; yalnızca görsel ve işitsel senkronizasyonu sağlamakla
kalmayıp, aynı zamanda taraftar etkileşimini artırmak amacıyla toplu tezahüratlara
eşlik etme, şarkı sözlerini takip etme, takımı destekleme gibi sosyal etkileşim
olanakları da sunmaktadır.


ÖZET
Bu buluş, spor müsabakaları, konserler, mitingler ve benzeri kitlesel etkinliklerde,
katılımcıların mobil cihazları aracılığıyla eşzamanlı ses ve ışık gösterisi
gerçekleştirmelerini sağlayan merkezi yönetimli kapsamlı bir sistemdir. Sistem,
süperadmin, admin ve mobil istemci modüllerinden oluşur. Süperadmin modülü ülke,
takım ve yönetici tanımlamalarını içerirken; admin paneli, etkinliklerin oluşturulması,
ses ve ışık içeriklerinin yüklenmesi ve yayını gibi işlevleri üstlenir. Mobil istemciler ise
kullanıcıların etkinliklere katılımını ve senkronize gösteri deneyimini sağlar.
Mevcut toplu etkinliklerde tribünlerin koordinasyonu ve senkronizasyonu zorluklarla
karşılaşmakta, gecikmeler ve kontrolsüz tezahüratlar etkinlik atmosferini olumsuz
etkileyebilmektedir. Bu sistem, katılımcıların cihazlarında anlık ve gecikmesiz olarak ses,
ışık ve şarkı sözü senkronizasyonu sağlayarak tribünlerdeki destek ve katılımı maksimum
düzeye çıkarır.
Sistem aynı zamanda tribünlerde temiz, düzenli ve pozitif tezahürat kültürünü destekler.
Küfürlü ve olumsuz tezahüratların azalmasına, taraftarların ortak paydada buluşmasına
ve toplu etkileşimin artmasına yardımcı olur. Bu sayede tribün atmosferi daha kontrollü,
coşkulu ve etkileşimli hale gelir.
Uygulama alanları başta futbol ve basketbol gibi spor karşılaşmaları olmak üzere,
stadyumlar, konserler, festivaller ve tüm açık hava kitlesel etkinliklerini kapsamaktadır.
Sistem, toplulukları bir araya getirerek, etkinlik deneyimini hem teknik hem de sosyal
açıdan iyileştiren yenilikçi bir çözümdür.
